{"name":"Congeal","tagline":"A collection of type macros intended for making Cake pattern more manageable.","body":"A collection of type macros intended for making Cake pattern more manageable.\r\n\r\nThe general idea of the type macros I want to implement here is described in my\r\nblog post [Taming the Cake Pattern with Type\r\nMacros](http://scabl.blogspot.com/2013/03/cbdi-2.html).\r\n\r\nAt the moment, congeal only builds against experimental \"Kepler\" branch of Scala.\r\n\r\nFair warning: one of the three kepler commits from Jun 02 & Jun 03 broke my\r\ntests. examples still run. i have a workaround in place until i have a\r\nmoment to address this. https://github.com/scalamacros/kepler/commits/master\r\n\r\nAll macros require type `A` to be \"simple\", i.e., meet the following conditions:\r\n\r\n  - is a trait\r\n  - is static (i.e., not a member of a method or trait. only objects all the way up.)\r\n  - no non-private[this] inner classes\r\n  - no members that have params or return types that derive from A\r\n\r\nMacros completed so far:\r\n  - api[A]\r\n  - impl[A]\r\n  - componentApi[A]\r\n  - componentImpl[A]\r\n  - hasDependency[A]\r\n  - hasPart[A]\r\n  - standsInFor[A]\r\n  - hasPrivatePart[A]\r\n\r\nMacros still to do:\r\n  - mock[A]\r\n    - have initial implementation of easyMock[A]. need to generalize\r\n\r\nOther TODO items:\r\n  - cull TODO and FIX comments from the code\r\n  - basic documentation\r\n  - test/implement: A inherits from B, api[A] inherits from api[B]\r\n  - test/implement: A inherits from B, impl[A] inherits from impl[B]\r\n  - test/implement: A inherits from B, component[A] inherits from component[B]\r\n  - test/implement: A has vals\r\n  - test/implement: A has non-public, non-private decls\r\n  - tests for type equivalence and other relations, such as:\r\n    - implicitly[api[A] =:= api[A]]\r\n    - implicitly[impl[A] <:< api[A]]\r\n\r\nLonger term ideas:\r\n  - improved error messages\r\n  - use AST and/or proxies to remove restrictions on the classes that can be congealed\r\n\r\nError Messages to override:\r\n\r\n  - trait Bar { def bar: String = \"bar\" }\r\n    trait Foo extends hasDependency[Bar] { def foo: String = bar.bar }\r\n    impl[Foo]\r\n\r\n    object creation impossible, since method bar in trait hasDependencyOfBar of type => Bar is not defined\r\n      new impl[Foo] {}\r\n          ^\r\n    one error found\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}